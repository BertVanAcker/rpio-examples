package LogicalArchitecture
public
	with messages,Base_Types,MBED;
	
	-- ****************************** KNOWLEDGE component ****************************** --
	process knowledge
		features
			-- input from managed system
			weatherConditions: in out event data port messages::weatherConditions;
			shipPose: in out event data port messages::shipPose;
			shipAction: in out event data port messages::shipAction;
			-- output to managed system
			pathEstimate: in out event data port messages::predictedPath;
			--internal knowledge
			pathAnomaly: in out event data port Base_Types::Boolean;
			plan: in out event data port messages::predictedPath;
			isLegit:in out event data port Base_Types::Boolean;

	end knowledge;
	
	
	
	
	-- ****************************** MONITOR component ****************************** --
	process monitor
		features
			weatherConditions: in event data port messages::weatherConditions;
			shipPose: in event data port messages::shipPose;
			shipAction: in event data port messages::shipAction;
			pathEstimate: out event data port messages::predictedPath;
	end monitor;
	
	process implementation monitor.impl
		subcomponents
			shipPoseEstimation: thread shipPoseEstimation;
			
		connections
			I1: port shipPose -> shipPoseEstimation.shipPose;
			I2: port weatherConditions -> shipPoseEstimation.weatherConditions;
			I3: port shipAction -> shipPoseEstimation.shipAction;
			O1: port shipPoseEstimation.pathEstimate -> pathEstimate;
			
	end monitor.impl;
	
	
	thread shipPoseEstimation
		features
			weatherConditions: in event data port messages::weatherConditions;
			shipPose: in event data port messages::shipPose;
			shipAction: in event data port messages::shipAction;
			pathEstimate: out event data port messages::predictedPath;
		
		
	end shipPoseEstimation;
	
	thread implementation shipPoseEstimation.impl

	end shipPoseEstimation.impl;
	
	-- ****************************** ANALYSIS component ****************************** --
	process analysis
		features
			pathEstimate: in event data port messages::predictedPath;
			pathAnomaly: out event data port Base_Types::Boolean;
	end analysis;
	
	process implementation analysis.impl
		subcomponents
			analyzePathPredictions: thread analyzePathPredictions;
			
		connections
			I1: port pathEstimate -> AnalyzePathPredictions.pathEstimate;
			O1: port analyzePathPredictions.pathAnomaly -> pathAnomaly;
		
			
	end analysis.impl;
	
	
	thread analyzePathPredictions
		features
			pathEstimate: in event data port messages::predictedPath;
			pathAnomaly: out event data port Base_Types::Boolean;
		
		
	end AnalyzePathPredictions;
	
	thread implementation AnalyzePathPredictions.impl

	end AnalyzePathPredictions.impl;
	
	
	-- ****************************** PLAN component ****************************** --
	process plan
		features
			--todo: what does the plan-phase use as input?
			plan: out event data port messages::predictedPath;
	end plan;
	
	process implementation plan.impl
		subcomponents
			planner: thread planner;
			
		connections
			--todo: what does the plan-phase use as input?
			O1: port planner.plan-> plan;
		
			
	end plan.impl;
	
	
	thread planner
		features
			--todo: what does the plan-phase use as input?
			plan: out event data port messages::predictedPath;
					
	end planner;
	
	thread implementation planner.impl

	end planner.impl;
	
	-- ****************************** LEGITIMATE component ****************************** --
	process legitimate
		features
			--todo: what does the plan-phase use as input?
			plan: in event data port messages::predictedPath;
			verifyPlan: in event port;
			
			planRejected: out event port;
			planAccepted: out event port;
			
	end legitimate;
	
	process implementation legitimate.impl
		subcomponents
			Initialise_impl: thread initialise.impl in modes(Initialise);
			WaitForSignal_impl: thread waitingForSignal.impl in modes(WaitForSignal);
			PerformVerification_impl: thread performVerification.impl in modes(PerformVerification);
			
				
		connections
			I1: port plan -> PerformVerification_impl.plan;
			I2: port plan -> WaitForSignal_impl.plan;
			O1: port PerformVerification_impl.planAccepted -> planAccepted;
			O2: port PerformVerification_impl.planRejected -> planRejected;
			
			
		modes
			Initialise :initial mode;
			WaitForSignal: mode;
			PerformVerification: mode;
			
			
			Initialise -[Initialise_impl.initialisationDone]-> WaitForSignal;
			WaitForSignal -[verifyPlan]-> PerformVerification;
			PerformVerification -[PerformVerification_impl.planAccepted]-> WaitForSignal;
			PerformVerification -[PerformVerification_impl.planRejected]-> WaitForSignal;
			
			
	end legitimate.impl;
	
	
	thread waitingForSignal
		features
			plan: in event data port messages::predictedPath;
			
			
	end waitingForSignal;
	
	thread implementation waitingForSignal.impl

	end waitingForSignal.impl;
	
	thread initialise
		features
			initialisationDone: out event port;
	end initialise;
	
	thread implementation initialise.impl

	end initialise.impl;
	
	thread performVerification
		features
			plan: in event data port messages::predictedPath;
			planRejected: out event port;
			planAccepted: out event port;			
			
	end performVerification;
	
	thread implementation performVerification.impl

	end performVerification.impl;
	
	
	-- ****************************** EXECUTE component ****************************** --
	process execute
		features
			plan: in event data port messages::predictedPath;
			isLegit:in event data port Base_Types::Boolean;
			pathEstimate: out event data port messages::predictedPath;
	end execute;
	
	process implementation execute.impl
		subcomponents
			executer: thread executer;
			
		connections
			I1: port plan -> executer.plan;
			I2: port isLegit -> executer.isLegit;
			O1: port executer.pathEstimate-> pathEstimate;
		
			
	end execute.impl;
	
	
	thread executer
		features
			plan: in event data port messages::predictedPath;
			isLegit:in event data port Base_Types::Boolean;
			pathEstimate: out event data port messages::predictedPath;
		
		
	end executer;
	
	thread implementation executer.impl

	end executer.impl;
	
	
---------------------------------------- MANAGED SYSTEM ELEMENTS -------------------------------
process controlSoftware
		features
			dataIn: in event data port messages::predictedPath;
	end controlSoftware;
	
	process implementation controlSoftware.impl
		subcomponents
			controller: thread controller;
			
		connections
			--todo: what does the plan-phase use as input?
			O1: port dataIn -> controller.dataIn;
		
			
	end controlSoftware.impl;
	
	
	thread controller
		features
			dataIn: in event data port messages::predictedPath;
					
	end controller;
	
	thread implementation controller.impl

	end controller.impl;
	
	
	
	
end LogicalArchitecture;